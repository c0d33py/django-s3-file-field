[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "django-s3-file-field"
description = "A Django library for uploading files directly to AWS S3 or MinIO Storage from HTTP clients."
readme = "README.md"
requires-python = ">=3.8"
license = { text = "Apache 2.0" }
maintainers = [{ name = "Kitware, Inc.", email = "kitware@kitware.com" }]
keywords = [
  "django",
  "django-widget",
  "minio",
  "s3",
]
classifiers = [
  "Development Status :: 3 - Alpha",
  "Environment :: Web Environment",
  "Framework :: Django :: 3.2",
  "Framework :: Django :: 4.1",
  "Framework :: Django :: 4.2",
  "Framework :: Django",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: Apache Software License",
  "Operating System :: OS Independent",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python",
]
dependencies = [
  "django>=3.2",
  "djangorestframework",
]
dynamic = ["version"]

[project.urls]
Repository = "https://github.com/girder/django-s3-file-field"
"Bug Reports" = "https://github.com/girder/django-s3-file-field/issues"

[project.entry-points.pytest11]
s3_file_field = "s3_file_field.fixtures"

[project.optional-dependencies]
boto3 = [
  "django-storages[boto3]",
  "boto3",
]
minio = [
  "django-minio-storage",
  "minio<7",
]
pytest = [
  # The "fixtures.py" module (containing the "pytest" requirement) is only loaded
  # automatically via entry point by consumers who already have "pytest" installed, so
  # "pytest" isn't actually a hard requirement.
  "pytest",
]

[tool.hatch.build]
only-include = [
  "s3_file_field",
]
artifacts = [
  "s3_file_field/static",
]

[tool.hatch.build.targets.sdist]
only-include = [
  "s3_file_field",
  # The builder needs to run again when installing the sdist, although it will no-op
  "multi_npm_builder.py",
]

[tool.hatch.build.hooks.jupyter-builder]
dependencies = ["hatch-jupyter-builder"]
build-function = "multi_npm_builder.multi_npm_builder"
ensured-targets = [
  "s3_file_field/static/s3_file_field/widget.js",
  "s3_file_field/static/s3_file_field/widget.css",
]

[[tool.hatch.build.hooks.jupyter-builder.build-kwargs.projects]]
build_cmd = "build"
path = "javascript-client"
source_dir = "javascript-client"
build_dir = "javascript-client/dist"

[[tool.hatch.build.hooks.jupyter-builder.build-kwargs.projects]]
build_cmd = "build"
path = "widget"
source_dir = "widget"
build_dir = "s3_file_field/static/s3_file_field"

[tool.hatch.version]
source = "vcs"

[tool.black]
line-length = 100
target-version = ["py38"]

[tool.django-stubs]
django_settings_module = "tests.test_app.settings"

[tool.isort]
profile = "black"
line_length = 100
# Sort by name, don't cluster "from" vs "import"
force_sort_within_sections = true
# Combines "as" imports on the same line
combine_as_imports = true

# test_app is local, but is provided by Django as an absolute import
known_first_party = "test_app"

[tool.mypy]
ignore_missing_imports = true
show_error_codes = true
plugins = [
    "mypy_django_plugin.main",
    "mypy_drf_plugin.main",
]

[tool.pytest.ini_options]
addopts = "--strict-markers --showlocals --verbose"
filterwarnings = [
    "error",
    # pytest often causes unclosed socket warnings
    'ignore:unclosed <socket\.socket:ResourceWarning',
    "ignore::DeprecationWarning:minio",
]
DJANGO_SETTINGS_MODULE = "test_app.settings"
